# SPDX-FileCopyrightText: 2024 Frank Hunleth
#
# SPDX-License-Identifier: Apache-2.0
#
# Post-installation firmware operations (UNIT TEST VERSION)
#
# Run: fwup -c -f ops.conf -o ops.fw
#
# Tasks include:
#
# * `factory-reset` - Clear out the writable filesystem and any other writable
#                   areas so that they can be re-initialized on the next boot.
# * `prevent-revert` - Prevent `revert` from working until the next firmware
# * `revert` - Revert to the previous firmware if it's still available
# * `validate` - Mark this firmware as a good update.
# * `status` - Print out which partition is active (`a` or `b`)
#
# To use:
#
# 1. Run `fwup -c -f fwup-ops.conf -o ops.fw` and copy ops.fw to
#    the device. This is done automatically as part of the Nerves system
#    build process. The file is stored in `/usr/share/fwup/ops.fw`.
# 2. On the device, run `fwup -t <task> -d /dev/rootdisk0 --enable-trim /usr/share/fwup/ops.fw`.
# 3. Reboot after running `revert` or `factory-reset`.

require-fwup-version="1.0.0"

uboot-environment uboot-env {
    block-offset = 0
    block-count = 32
}

##
# factory-reset
##
task factory-reset {
    on-init {
        uboot_clearenv(uboot-env)
        uboot_setenv(uboot-env, "a.nerves_fw_validated", "1")
        uboot_setenv(uboot-env, "nerves_fw_validated", "0")
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
    }
}

##
# prevent-revert
#
##
task prevent-revert.a {
    # Check that we're running on B and it has been validated
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")
    require-uboot-variable(uboot-env, "b.nerves_fw_validated", "1")
    on-init {
        info("prevent-revert")
        uboot_setenv(uboot-env, "a.nerves_fw_validated", "0")
    }
}
task prevent-revert.b {
    # Check that we're running on A and it has been validated
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    require-uboot-variable(uboot-env, "a.nerves_fw_validated", "1")
    on-init {
        info("prevent-revert")
        uboot_setenv(uboot-env, "b.nerves_fw_validated", "0")
    }
}
task prevent-revert.fail {
    on-init { error("Error preventing a revert") }
}

##
# revert
##
task revert.a {
    # This task reverts to the A partition, so check that we're running on B
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")
    require-uboot-variable(uboot-env, "a.nerves_fw_validated", "1")

    on-init {
        info("revert")
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
    }
}
task revert.b {
    # This task reverts to the B partition, so check that we're running on A
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    require-uboot-variable(uboot-env, "b.nerves_fw_validated", "1")

    on-init {
        info("revert")
        uboot_setenv(uboot-env, "nerves_fw_active", "b")
    }
}
task revert.fail {
    on-init { error("Error reverting") }
}

##
# status
#
# Run "fwup /usr/share/fwup/ops.fw -t status -d /dev/rootdisk0 -q -U" to check the status.
##
task status.aa {
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    require-uboot-variable(uboot-env, "a.nerves_fw_validated", "1")
    on-init { info("a") }
}
task status.ab {
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    on-init { info("a->b") }
}
task status.bb {
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")
    require-uboot-variable(uboot-env, "b.nerves_fw_validated", "1")
    on-init { info("b") }
}
task status.ba {
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")
    on-init { info("b->a") }
}
task status.fail {
    on-init { error("Error getting status") }
}

##
# validate
#
# The fwup configuration for this device always validates, so this doesn't do anything.
##
task validate.a {
    # This task validates the A partition, so check that we're running on A
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    on-init {
        info("validate")
        uboot_setenv(uboot-env, "a.nerves_fw_validated", "1")
    }
}
task validate.b {
    # This task validates the A partition, so check that we're running on A
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")
    on-init {
        info("validate")
        uboot_setenv(uboot-env, "b.nerves_fw_validated", "1")
    }
}
task validate.fail {
    on-init { error("Error validating fw") }
}
